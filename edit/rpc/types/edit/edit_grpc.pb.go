// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: edit.proto

package edit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EditClient is the client API for Edit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EditClient interface {
	SubmitItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
}

type editClient struct {
	cc grpc.ClientConnInterface
}

func NewEditClient(cc grpc.ClientConnInterface) EditClient {
	return &editClient{cc}
}

func (c *editClient) SubmitItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, "/edit.Edit/submitItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/edit.Edit/userInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EditServer is the server API for Edit service.
// All implementations must embed UnimplementedEditServer
// for forward compatibility
type EditServer interface {
	SubmitItem(context.Context, *ItemRequest) (*ItemResponse, error)
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	mustEmbedUnimplementedEditServer()
}

// UnimplementedEditServer must be embedded to have forward compatible implementations.
type UnimplementedEditServer struct {
}

func (UnimplementedEditServer) SubmitItem(context.Context, *ItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitItem not implemented")
}
func (UnimplementedEditServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedEditServer) mustEmbedUnimplementedEditServer() {}

// UnsafeEditServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EditServer will
// result in compilation errors.
type UnsafeEditServer interface {
	mustEmbedUnimplementedEditServer()
}

func RegisterEditServer(s grpc.ServiceRegistrar, srv EditServer) {
	s.RegisterService(&Edit_ServiceDesc, srv)
}

func _Edit_SubmitItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).SubmitItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edit.Edit/submitItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).SubmitItem(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edit.Edit/userInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Edit_ServiceDesc is the grpc.ServiceDesc for Edit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Edit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "edit.Edit",
	HandlerType: (*EditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "submitItem",
			Handler:    _Edit_SubmitItem_Handler,
		},
		{
			MethodName: "userInfo",
			Handler:    _Edit_UserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "edit.proto",
}
